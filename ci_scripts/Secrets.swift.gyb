// Secrets.swift.gyb
%{
import os

def chunks(seq, size):
    return (seq[i:(i + size)] for i in range(0, len(seq), size))

def encode(string, cipher):
    bytes = string.encode("UTF-8")
    return [bytes[i] ^ cipher[i % len(cipher)] for i in range(0, len(bytes))]
    env_dict = {}

env_dict = {
  "BACKEND_URL": os.environ.get("BACKEND_URL", ""),
  "API_KEY": os.environ.get("API_KEY", ""),
  "REVENUECAT_API_KEY": os.environ.get("REVENUECAT_API_KEY", ""),
  "STORE_ENTITLEMENT_ID": os.environ.get("STORE_ENTITLEMENT_ID", ""),
}

try:
    with open('../.env', 'r') as file:
        for line in file:
            if line.startswith('#') or line.startswith('\n'):
                continue
            key, value = line.strip().split('=', 1)
            env_dict[key] = value
except Exception as e:
    print(e)
    print("Failed to read .env file. Using default values.")

}%
enum Secrets {
    private static let salt: [UInt8] = [
    %{ salt = [byte for byte in os.urandom(64)] }%
    % for chunk in chunks(salt, 8):
        ${"".join(["0x%02x, " % byte for byte in chunk])}
    % end
    ]

    % for key, value in env_dict.items():
    static var ${key}: String {
        let encoded: [UInt8] = [
        % for chunk in chunks(encode(value, salt), 8):
            ${"".join(["0x%02x, " % byte for byte in chunk])}
        % end
        ]

        return decode(encoded, cipher: salt)
    }
    % end

    static func decode(_ encoded: [UInt8], cipher: [UInt8]) -> String {
        String(decoding: encoded.enumerated().map { (offset, element) in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }
}
